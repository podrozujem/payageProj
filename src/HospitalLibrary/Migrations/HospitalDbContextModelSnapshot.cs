// <auto-generated />
using System;
using HospitalLibrary.Settings;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HospitalLibrary.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    partial class HospitalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("HospitalLibrary.Core.Model.Appointment", b =>
                {
                    b.Property<string>("AppointmentId")
                        .HasColumnType("text");

                    b.Property<int>("AppointmentType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("PatientId")
                        .HasColumnType("integer");

                    b.Property<int?>("RoomId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            AppointmentId = "app1",
                            AppointmentType = 0,
                            Date = new DateTime(2023, 11, 8, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2023, 11, 8, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2023, 11, 8, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = "Ambulanta"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "Hirurgija"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Name = "Stomatologija"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.DailyMeasurements", b =>
                {
                    b.Property<string>("DailyMeasurementsId")
                        .HasColumnType("text");

                    b.Property<float>("BloodPreasure")
                        .HasColumnType("real");

                    b.Property<float>("BloodSugar")
                        .HasColumnType("real");

                    b.Property<DateTime>("DateTimeOfMeasurements")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<float>("FatPercentage")
                        .HasColumnType("real");

                    b.Property<DateTime>("MenstrualCycle")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("PatientId")
                        .HasColumnType("integer");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("DailyMeasurementsId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("DailyMeasurements");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<int>("patientId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfCreation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAnonymous = false,
                            IsApproved = false,
                            IsPublic = true,
                            Text = "Neki tekst",
                            patientId = 3
                        },
                        new
                        {
                            Id = 2,
                            DateOfCreation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAnonymous = false,
                            IsApproved = false,
                            IsPublic = true,
                            Text = "Novi fidbek",
                            patientId = 4
                        },
                        new
                        {
                            Id = 3,
                            DateOfCreation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAnonymous = true,
                            IsApproved = false,
                            IsPublic = false,
                            Text = "Neki tekst najnoviji",
                            patientId = 3
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Floor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BuildingId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Floors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Number = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Number = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Number = 1
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            Number = 1
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Payment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<int>("CVV")
                        .HasColumnType("integer");

                    b.Property<string>("CardHolderNumber")
                        .HasColumnType("text");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<int>("ExpirationMonth")
                        .HasColumnType("integer");

                    b.Property<int>("ExpirationYear")
                        .HasColumnType("integer");

                    b.Property<string>("HolderName")
                        .HasColumnType("text");

                    b.Property<string>("OrderReference")
                        .HasColumnType("text");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("payments");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Amount = 10000.0,
                            CVV = 99,
                            CardHolderNumber = "09099980777",
                            Currency = "EUR",
                            ExpirationMonth = 9,
                            ExpirationYear = 2025,
                            HolderName = "Mika Mikic",
                            OrderReference = "Neka referenca",
                            PaymentStatus = 0
                        },
                        new
                        {
                            Id = "2",
                            Amount = 20900.0,
                            CVV = 123,
                            CardHolderNumber = "34776899909",
                            Currency = "RSD",
                            ExpirationMonth = 4,
                            ExpirationYear = 2024,
                            HolderName = "Pera Peric",
                            OrderReference = "Neka referenca",
                            PaymentStatus = 1
                        },
                        new
                        {
                            Id = "3",
                            Amount = 34999.0,
                            CVV = 456,
                            CardHolderNumber = "342221567899",
                            Currency = "EUR",
                            ExpirationMonth = 4,
                            ExpirationYear = 2025,
                            HolderName = "Ana Anic",
                            OrderReference = "Neka refernca",
                            PaymentStatus = 1
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BuildingId")
                        .HasColumnType("integer");

                    b.Property<int?>("FloorId")
                        .HasColumnType("integer");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("FloorId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Number = "101A"
                        },
                        new
                        {
                            Id = 2,
                            Number = "204"
                        },
                        new
                        {
                            Id = 3,
                            Number = "305B"
                        },
                        new
                        {
                            Id = 4,
                            Number = "405B"
                        },
                        new
                        {
                            Id = 5,
                            Number = "505B"
                        },
                        new
                        {
                            Id = 6,
                            Number = "605B"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Specialization", b =>
                {
                    b.Property<string>("SpecializationId")
                        .HasColumnType("text");

                    b.Property<string>("SpecializationName")
                        .HasColumnType("text");

                    b.HasKey("SpecializationId");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            SpecializationId = "op",
                            SpecializationName = "Opsta praksa"
                        },
                        new
                        {
                            SpecializationId = "spc",
                            SpecializationName = "Specijalista"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<bool>("RequirePasswordChange")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "manager@email.com",
                            Password = "password",
                            RequirePasswordChange = false,
                            Type = 2
                        },
                        new
                        {
                            Id = 2,
                            Email = "mihailoveljic3010@gmail.com",
                            Password = "password",
                            RequirePasswordChange = true,
                            Type = 3
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.map.MapBuilding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BuildingId")
                        .HasColumnType("integer");

                    b.Property<double>("Height")
                        .HasColumnType("double precision");

                    b.Property<double>("Width")
                        .HasColumnType("double precision");

                    b.Property<double>("X")
                        .HasColumnType("double precision");

                    b.Property<double>("Y")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("MapBuildings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Height = 40.0,
                            Width = 30.0,
                            X = 2.0,
                            Y = 2.0
                        },
                        new
                        {
                            Id = 2,
                            Height = 40.0,
                            Width = 30.0,
                            X = 0.0,
                            Y = 0.0
                        },
                        new
                        {
                            Id = 3,
                            Height = 40.0,
                            Width = 30.0,
                            X = 4.0,
                            Y = 6.0
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.map.MapRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("Height")
                        .HasColumnType("double precision");

                    b.Property<int?>("RoomId")
                        .HasColumnType("integer");

                    b.Property<double>("Width")
                        .HasColumnType("double precision");

                    b.Property<double>("X")
                        .HasColumnType("double precision");

                    b.Property<double>("Y")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("MapRooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Height = 40.0,
                            Width = 30.0,
                            X = 2.0,
                            Y = 2.0
                        },
                        new
                        {
                            Id = 2,
                            Height = 40.0,
                            Width = 30.0,
                            X = 0.0,
                            Y = 0.0
                        },
                        new
                        {
                            Id = 3,
                            Height = 40.0,
                            Width = 30.0,
                            X = 4.0,
                            Y = 6.0
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Doctor", b =>
                {
                    b.HasBaseType("HospitalLibrary.Core.Model.User");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SpecializationId")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasIndex("SpecializationId");

                    b.HasDiscriminator().HasValue("Doctor");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            Email = "vojin@gmail.com",
                            FirstName = "Vojin",
                            LastName = "Dzeletovic",
                            Password = "vojin",
                            RequirePasswordChange = false,
                            Type = 1,
                            EndTime = new DateTime(2023, 11, 8, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2023, 11, 8, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            Email = "igi@gmail.com",
                            FirstName = "Igor",
                            LastName = "Miskic",
                            Password = "igi",
                            RequirePasswordChange = false,
                            Type = 1,
                            EndTime = new DateTime(2023, 11, 8, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2023, 11, 8, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Manager", b =>
                {
                    b.HasBaseType("HospitalLibrary.Core.Model.User");

                    b.HasDiscriminator().HasValue("Manager");

                    b.HasData(
                        new
                        {
                            Id = 7,
                            Email = "jelena@gmail.com",
                            FirstName = "Jelena",
                            LastName = "Dinic",
                            Password = "1234",
                            RequirePasswordChange = false,
                            Type = 2
                        },
                        new
                        {
                            Id = 8,
                            Email = "jjj@gmail.com",
                            FirstName = "Neko",
                            LastName = "Blabla",
                            Password = "4321",
                            RequirePasswordChange = false,
                            Type = 2
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Patient", b =>
                {
                    b.HasBaseType("HospitalLibrary.Core.Model.User");

                    b.HasDiscriminator().HasValue("Patient");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Email = "stefan@gmail.com",
                            FirstName = "Stefan",
                            LastName = "Tosic",
                            Password = "stefan",
                            RequirePasswordChange = false,
                            Type = 0
                        },
                        new
                        {
                            Id = 4,
                            Email = "ogi@gmail.com",
                            FirstName = "Ognjen",
                            LastName = "OG",
                            Password = "ogi",
                            RequirePasswordChange = false,
                            Type = 0
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Appointment", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("HospitalLibrary.Core.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("HospitalLibrary.Core.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.DailyMeasurements", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("HospitalLibrary.Core.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Floor", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Room", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId");

                    b.HasOne("HospitalLibrary.Core.Model.Floor", "Floor")
                        .WithMany()
                        .HasForeignKey("FloorId");

                    b.Navigation("Building");

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.map.MapBuilding", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.map.MapRoom", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Doctor", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId");

                    b.Navigation("Specialization");
                });
#pragma warning restore 612, 618
        }
    }
}
